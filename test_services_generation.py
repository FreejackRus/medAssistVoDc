#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ª—É–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot import MedicalAssistant

def test_services_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ª—É–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∏–∞–±–µ—Ç–∞ 1 —Ç–∏–ø–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = MedicalAssistant()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    test_text = """
3. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ãüè• –£—Å–ª—É–≥–∏ 
–£–ó–ò –ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã : 
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∏–∞–±–µ—Ç–∞ 1 —Ç–∏–ø–∞, –Ω–æ –º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞—Ç—Ä–æ—Ñ–∏–∏ –∏–ª–∏ —Ñ–∏–±—Ä–æ–∑–∞ –≤ –ø–æ–∑–¥–Ω–∏—Ö —Å—Ç–∞–¥–∏—è—Ö. 
–ú–†–¢/–ö–¢ –æ—Ä–≥–∞–Ω–æ–≤ –±—Ä—é—à–Ω–æ–π –ø–æ–ª–æ—Å—Ç–∏ : 
–ù–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –æ–ø—É—Ö–æ–ª–µ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Å—É–ª–∏–Ω–æ–º–∞). 
–ò–º–º—É–Ω–æ—Ñ–µ–Ω–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º—Ñ–æ—Ü–∏—Ç–æ–≤ (CD4/CD8) : 
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ. 
–û—Ü–µ–Ω–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Œ≤-–∫–ª–µ—Ç–æ–∫ : 
–ì–ª—é–∫–æ–∑–æ–∑–∞–≤–∏—Å–∏–º—ã–π –∏–Ω—Å—É–ª–∏–Ω–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ–ø—Ç–∏–¥ (C-–ø–µ–ø—Ç–∏–¥): 
–ù–∞—Ç–æ—â–∞–∫: <0,2 –Ω–º–æ–ª—å/–ª ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å. 
–ü—Ä–∏ —Å—Ç–∏–º—É–ª—è—Ü–∏–∏ –≥–ª—é–∫–æ–∑–æ–π (1,75 –≥/–∫–≥): <0,3 –Ω–º–æ–ª—å/–ª ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ Œ≤-–∫–ª–µ—Ç–æ–∫. 
–ò—Å–∫–ª—é—á–µ–Ω–∏–µ : –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ C-–ø–µ–ø—Ç–∏–¥–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –∫–µ—Ç–æ–∞—Ü–∏–¥–æ–∑–µ –∏–∑-–∑–∞ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π. 
4. –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)üè• –£—Å–ª—É–≥–∏ 
–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞ —É –¥–µ—Ç–µ–π: 
–ß–∞—Å—Ç–æ —É –¥–µ—Ç–µ–π —Å –æ–∂–∏—Ä–µ–Ω–∏–µ–º, —Å–∏–º–ø—Ç–æ–º—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–µ—Ç –∫–µ—Ç–æ–∞—Ü–∏–¥–æ–∑–∞. 
HbA1c >6,5%, C-–ø–µ–ø—Ç–∏–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω. 
–ú–æ–Ω–æ–≥–µ–Ω–Ω—ã–π –¥–∏–∞–±–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, MODY): 
–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∞—É—Ç–æ—Å–æ–º–Ω–æ-–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ–º—É —Ç–∏–ø—É. 
–í–æ–∑—Ä–∞—Å—Ç –Ω–∞—á–∞–ª–∞: –¥–æ 25 –ª–µ—Ç, –Ω–æ —á–∞—Å—Ç–æ –ø–æ–∑–∂–µ. 
–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–Ω—Ç–∏—Ç–µ–ª (anti-GAD65, IA-2). 
C-–ø–µ–ø—Ç–∏–¥ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω. 
–î–∏–∞–±–µ—Ç –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç–∞, –æ–ø—É—Ö–æ–ª–∏ –ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã: 
–ü—Ä–∏–∑–Ω–∞–∫–∏: –±–æ–ª–∏ –≤ –∂–∏–≤–æ—Ç–µ, —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞, –∞–Ω–æ–º–∞–ª–∏–∏ –Ω–∞ –£–ó–ò/–ö–¢. 
–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–Ω–¥—Ä–æ–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–Ω–¥—Ä–æ–º –£–Ω–¥–∏–Ω—ã, —Å–∏–Ω–¥—Ä–æ–º –í–æ–ª—å—Ñ—Ä–∞–º–∞): 
–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. 
–î–∏–∞–±–µ—Ç –ø—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö: 
–ì–ª—é–∫–æ–∫–æ—Ä—Ç–∏–∫–æ—Å—Ç–µ—Ä–æ–∏–¥—ã, –∏–º–º—É–Ω–æ–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã (—Ü–∏–∫–ª–æ—Å–ø–æ—Ä–∏–Ω), —Ç–∏–∞–∑–∏–¥–Ω—ã–µ –¥–∏—É—Ä–µ—Ç–∏–∫–∏.
    """
    
    print("=== –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –£–°–õ–£–ì ===")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç ({len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(test_text[:200] + "...")
    print("\n" + "="*50)
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ª—É–≥
        print("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ª—É–≥...")
        services = bot.generate_services_for_step(test_text)
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(services)} —É—Å–ª—É–≥")
        
        if services:
            print("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:")
            for i, service in enumerate(services, 1):
                print(f"{i}. ID: {service.get('id', 'N/A')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {service.get('name', 'N/A')}")
        else:
            print("\n–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # –û–∂–∏–¥–∞–µ–º—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        expected_keywords = [
            "–£–ó–ò", "–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–æ–π", "–ú–†–¢", "–ö–¢", "C-–ø–µ–ø—Ç–∏–¥", 
            "HbA1c", "–≥–ª—é–∫–æ–∑–∞", "–∞–Ω—Ç–∏—Ç–µ–ª–∞", "GAD", "IA-2"
        ]
        
        print("\n=== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
        found_keywords = []
        if services:
            for service in services:
                service_name = service.get('name', '').lower()
                for keyword in expected_keywords:
                    if keyword.lower() in service_name:
                        found_keywords.append(keyword)
        
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        print(f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {len(found_keywords)}/{len(expected_keywords)} ({len(found_keywords)/len(expected_keywords)*100:.1f}%)")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ª—É–≥: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_services_generation()